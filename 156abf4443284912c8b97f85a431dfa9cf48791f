{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "375bf638_8863009d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1007981
      },
      "writtenOn": "2025-03-30T10:20:10Z",
      "side": 1,
      "message": "No that\u0027s the point of the test.\n\nA user should never be able to trick the filesystem (!) into opening /etc/passwd.",
      "revId": "156abf4443284912c8b97f85a431dfa9cf48791f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44ffca3e_58c1fc18",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1007981
      },
      "writtenOn": "2025-03-30T13:01:18Z",
      "side": 1,
      "message": "Ack for the quick fix.\n\nSorry for the breakage, I did not see this failure locally. \n\nI can improve OpenSymlinkRace later and re-enable. Maybe I should also increase the iterations.",
      "revId": "156abf4443284912c8b97f85a431dfa9cf48791f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69af2230_c8066b65",
        "filename": "posixtest/test.go",
        "patchSetId": 1
      },
      "lineNbr": 980,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2025-03-30T12:35:02Z",
      "side": 1,
      "message": "here.",
      "revId": "156abf4443284912c8b97f85a431dfa9cf48791f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f0eeb8b_0f4c3b29",
        "filename": "posixtest/test.go",
        "patchSetId": 1
      },
      "lineNbr": 1014,
      "author": {
        "id": 1007981
      },
      "writtenOn": "2025-03-30T10:25:54Z",
      "side": 1,
      "message": "The point here is that the ** go-fuse filesystem ** (as opposed to this test) has opened /etc/passwd. This should never happen.",
      "revId": "156abf4443284912c8b97f85a431dfa9cf48791f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fb89647_51530955",
        "filename": "posixtest/test.go",
        "patchSetId": 1
      },
      "lineNbr": 1014,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2025-03-30T11:13:41Z",
      "side": 1,
      "message": "I know what the point is, but this directory holds test that should pass against a posix compliant FS. In the way the test is currently written, it fails against a normal file system, see https://github.com/hanwen/go-fuse/actions/runs/14147410375",
      "parentUuid": "9f0eeb8b_0f4c3b29",
      "revId": "156abf4443284912c8b97f85a431dfa9cf48791f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a63e5b2_017ff17d",
        "filename": "posixtest/test.go",
        "patchSetId": 1
      },
      "lineNbr": 1014,
      "author": {
        "id": 1007981
      },
      "writtenOn": "2025-03-30T11:44:10Z",
      "side": 1,
      "message": "Right.\n\nHow about pointing the symlink to /proc/filesystems ?",
      "parentUuid": "5fb89647_51530955",
      "revId": "156abf4443284912c8b97f85a431dfa9cf48791f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd0ef76c_77accede",
        "filename": "posixtest/test.go",
        "patchSetId": 1
      },
      "lineNbr": 1014,
      "author": {
        "id": 1007981
      },
      "writtenOn": "2025-03-30T11:53:27Z",
      "side": 1,
      "message": "Or /dev/null, for darwin compatibility.",
      "parentUuid": "4a63e5b2_017ff17d",
      "revId": "156abf4443284912c8b97f85a431dfa9cf48791f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df20e809_027742a3",
        "filename": "posixtest/test.go",
        "patchSetId": 1
      },
      "lineNbr": 1014,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2025-03-30T12:35:02Z",
      "side": 1,
      "message": "I think you\u0027d have to use O_NOFOLLOW above (marked) for the test to truly test what it claims to test. The test whether `/etc/passwd` was opened should check the f.Stat() result against the Inode/dev pair for `/etc/passwd`",
      "parentUuid": "cd0ef76c_77accede",
      "revId": "156abf4443284912c8b97f85a431dfa9cf48791f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a4da743_5305a08b",
        "filename": "posixtest/test.go",
        "patchSetId": 1
      },
      "lineNbr": 1014,
      "author": {
        "id": 1007981
      },
      "writtenOn": "2025-03-30T12:51:22Z",
      "side": 1,
      "message": "When you pass O_NOFOLLOW you cannot trigger this race in loopback.",
      "parentUuid": "df20e809_027742a3",
      "revId": "156abf4443284912c8b97f85a431dfa9cf48791f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77321669_a33257a3",
        "filename": "posixtest/test.go",
        "patchSetId": 1
      },
      "lineNbr": 1014,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2025-03-30T13:28:41Z",
      "side": 1,
      "message": "did you try? I think O_FOLLOW would be filtered in the VFS, and does not reach the FUSE daemon.",
      "parentUuid": "4a4da743_5305a08b",
      "revId": "156abf4443284912c8b97f85a431dfa9cf48791f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15151796_85c9d3d4",
        "filename": "posixtest/test.go",
        "patchSetId": 1
      },
      "lineNbr": 1014,
      "author": {
        "id": 1007981
      },
      "writtenOn": "2025-03-30T13:48:24Z",
      "side": 1,
      "message": "I think I did. Let\u0027s check again. Without O_NOFOLLOW:\n\n130 jakob@brikett:~/code/go-fuse/fs$ go test -run TestPosix/OpenSymlinkRace -v | grep \": OPEN\" | head\n15:46:28.196959 rx 8: OPEN n18446744073709551615 {LARGEFILE} p21369\n15:46:28.197485 rx 24: OPEN n2 {LARGEFILE} p21369\n15:46:28.197618 rx 30: OPEN n2 {LARGEFILE} p21369\n15:46:28.198030 rx 36: OPEN n2 {LARGEFILE} p21369\n15:46:28.198231 rx 46: OPEN n2 {LARGEFILE} p21369\n15:46:28.198527 rx 56: OPEN n2 {LARGEFILE} p21369\n15:46:28.198746 rx 62: OPEN n2 {LARGEFILE} p21369\n15:46:28.199069 rx 74: OPEN n2 {LARGEFILE} p21369\n15:46:28.199138 rx 80: OPEN n2 {LARGEFILE} p21369\n15:46:28.199308 rx 90: OPEN n3 {LARGEFILE} p21369\n\nWith O_NOFOLLOW:\n\n\n\n130 jakob@brikett:~/code/go-fuse/fs$ go test -run TestPosix/OpenSymlinkRace -v | grep \": OPEN\" | head\n15:46:20.725530 rx 8: OPEN n18446744073709551615 {LARGEFILE} p21139\n15:46:20.726270 rx 28: OPEN n2 {LARGEFILE,0x20000} p21142\n15:46:20.726436 rx 34: OPEN n2 {LARGEFILE,0x20000} p21142\n15:46:20.726697 rx 44: OPEN n2 {LARGEFILE,0x20000} p21142\n15:46:20.727272 rx 64: OPEN n3 {LARGEFILE,0x20000} p21151\n15:46:20.728097 rx 92: OPEN n7 {LARGEFILE,0x20000} p21142\n15:46:20.728798 rx 130: OPEN n11 {LARGEFILE,0x20000} p21142\n15:46:20.729397 rx 164: OPEN n15 {LARGEFILE,0x20000} p21142\n15:46:20.729616 rx 182: OPEN n15 {LARGEFILE,0x20000} p21142\n15:46:20.729736 rx 190: OPEN n15 {LARGEFILE,0x20000} p21142\n\n\nNote:\n\n\tO_NOFOLLOW                       \u003d 0x20000",
      "parentUuid": "77321669_a33257a3",
      "revId": "156abf4443284912c8b97f85a431dfa9cf48791f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a779ac7_4d748cee",
        "filename": "posixtest/test.go",
        "patchSetId": 1
      },
      "lineNbr": 1014,
      "author": {
        "id": 1007981
      },
      "writtenOn": "2025-03-30T14:15:10Z",
      "side": 1,
      "message": "\u003e The test whether /etc/passwd was opened should check the f.Stat() result against the Inode/dev pair for /etc/passwd\n\nTried this - unfortunately does not work because rawBridge overrides Ino here:\n\nhttps://github.com/hanwen/go-fuse/blob/156abf4443284912c8b97f85a431dfa9cf48791f/fs/bridge.go#L577",
      "parentUuid": "15151796_85c9d3d4",
      "revId": "156abf4443284912c8b97f85a431dfa9cf48791f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ],
  "submitRequirementResults": []
}