{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "666c028d_e67383e3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1017031
      },
      "writtenOn": "2023-06-14T11:17:36Z",
      "side": 1,
      "message": "( I originally forgot to include the test into the patch; now fixed )",
      "revId": "1fcff6f2b3d5940173fd63686ff289a745c623ef",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f2fa5bc_d41f1f4f",
        "filename": "fuse/print.go",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2023-06-14T18:04:42Z",
      "side": 1,
      "message": "wouldn\u0027t it be simpler to shift a 0x1 left until you\u0027ve seen all the bist in `fl`?",
      "range": {
        "startLine": 93,
        "startChar": 6,
        "endLine": 93,
        "endChar": 11
      },
      "revId": "1fcff6f2b3d5940173fd63686ff289a745c623ef",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "394b992b_9b82b362",
        "filename": "fuse/print.go",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1017031
      },
      "writtenOn": "2023-06-15T07:48:26Z",
      "side": 1,
      "message": "Unfortunately that will not be equivalent to current code and also not all flags have only one bit set. I get\n\n```\nSYNC (101000)   nbits \u003d 2\npanic: not all flags have nbits\u003d1\n```\n\nwith the following verification patch:\n\n```\ndiff --git a/fuse/print.go b/fuse/print.go\nindex b767909..f50b38f 100644\n--- a/fuse/print.go\n+++ b/fuse/print.go\n@@ -10,6 +10,7 @@ import (\n        \"sort\"\n        \"strings\"\n        \"syscall\"\n+       \"math/bits\"\n )\n \n var (\n@@ -83,6 +84,31 @@ var (\n        }\n )\n \n+func checkFlags(names map[int64]string) (ok bool) {\n+       for k, v :\u003d range names {\n+               nbits :\u003d bits.OnesCount64(uint64(k))\n+               if nbits !\u003d 1 {\n+                       fmt.Printf(\"%s (%x)\\tnbits \u003d %d\\n\", v, k, nbits)\n+                       ok \u003d false\n+               }\n+       }\n+       return ok\n+}\n+\n+func init() {\n+       ok :\u003d true\n+       vnames :\u003d []map[int64]string{writeFlagNames, readFlagNames, initFlagNames, releaseFlagNames, openFlagNames, fuseOpenFlagNames, accessFlagName, getAttrFlagNames}\n+       for _, names :\u003d range vnames {\n+               nok :\u003d checkFlags(names)\n+               if !nok {\n+                       ok \u003d false\n+               }\n+       }\n+       if !ok {\n+               panic(\"not all flags have nbits\u003d1\")\n+       }\n+}\n+\n func flagString(names map[int64]string, fl int64, def string) string {\n        s :\u003d []string{}\n        // emit flags in their numeric order\n```",
      "parentUuid": "2f2fa5bc_d41f1f4f",
      "range": {
        "startLine": 93,
        "startChar": 6,
        "endLine": 93,
        "endChar": 11
      },
      "revId": "1fcff6f2b3d5940173fd63686ff289a745c623ef",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "800dab6e_02e027a7",
        "filename": "fuse/print.go",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2023-06-15T08:17:12Z",
      "side": 1,
      "message": "let\u0027s change the current code? The flag names are only used for debugging. In \nzerrors_linux_amd64.go I see\n\n```\n        O_DSYNC                          \u003d 0x1000\n        O_RSYNC                          \u003d 0x101000\n        O_FSYNC                          \u003d 0x101000     \n        O_SYNC                           \u003d 0x101000\n```\n\nwe could introduce DSYNC and leave 0x100000 alone. \n\nThat\u0027s the only one, right?\n\nI\u0027m worried that introducing a sort is going make things slower and make reproducing race conditions harder with printing turned on.",
      "parentUuid": "394b992b_9b82b362",
      "range": {
        "startLine": 93,
        "startChar": 6,
        "endLine": 93,
        "endChar": 11
      },
      "revId": "1fcff6f2b3d5940173fd63686ff289a745c623ef",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41bbb192_3050efe7",
        "filename": "fuse/print.go",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1017031
      },
      "writtenOn": "2023-06-15T20:11:55Z",
      "side": 1,
      "message": "Ok, I understand the desire to avoid sorting.\n\nI contemplated a bit and looked around. Unfortunately it is not only O_SYNC, but also e.g. O_TMPFILE which has two bits, and this is only on Linux, while many other systems might also have their peculiarities.\n\nI do not want to delve into endless game hitting such peculiarities and trying to fix them over and over.\n\nInstead I\u0027ve implemented a scheme where flags with several bits are supported, but we still do not use sorting at all. The data structure, that describes flag names, is now plain array instead of a map. Now flagString, probably, runs a bit faster due to that.\n\nPlease take another look.\n\nThanks beforehand,\nKirill",
      "parentUuid": "800dab6e_02e027a7",
      "range": {
        "startLine": 93,
        "startChar": 6,
        "endLine": 93,
        "endChar": 11
      },
      "revId": "1fcff6f2b3d5940173fd63686ff289a745c623ef",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e1bbac3_d0303e96",
        "filename": "fuse/print.go",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2023-06-16T09:52:15Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "41bbb192_3050efe7",
      "range": {
        "startLine": 93,
        "startChar": 6,
        "endLine": 93,
        "endChar": 11
      },
      "revId": "1fcff6f2b3d5940173fd63686ff289a745c623ef",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d46e45d9_fb9ea594",
        "filename": "fuse/print.go",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1017031
      },
      "writtenOn": "2023-06-16T17:09:09Z",
      "side": 1,
      "message": "Thanks",
      "parentUuid": "0e1bbac3_d0303e96",
      "range": {
        "startLine": 93,
        "startChar": 6,
        "endLine": 93,
        "endChar": 11
      },
      "revId": "1fcff6f2b3d5940173fd63686ff289a745c623ef",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}