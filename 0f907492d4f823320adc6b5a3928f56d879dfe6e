{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "376bd1e0_f6cfe19c",
        "filename": "benchmark/read_test.go",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2021-01-25T16:23:21Z",
      "side": 1,
      "message": "why a separate package?",
      "range": {
        "startLine": 5,
        "startChar": 8,
        "endLine": 5,
        "endChar": 17
      },
      "revId": "0f907492d4f823320adc6b5a3928f56d879dfe6e",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e197741f_e94c649a",
        "filename": "benchmark/read_test.go",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1018834
      },
      "writtenOn": "2021-01-26T08:13:25Z",
      "side": 1,
      "message": "Sorry, what do you mean? I used the same package as in benchmark/stat_test.go.",
      "parentUuid": "376bd1e0_f6cfe19c",
      "range": {
        "startLine": 5,
        "startChar": 8,
        "endLine": 5,
        "endChar": 17
      },
      "revId": "0f907492d4f823320adc6b5a3928f56d879dfe6e",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12904748_1ff2a928",
        "filename": "benchmark/read_test.go",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2021-01-26T18:39:06Z",
      "side": 1,
      "message": "sorry, I was confused; I didn\u0027t remember there was a benchmark directory.",
      "parentUuid": "e197741f_e94c649a",
      "range": {
        "startLine": 5,
        "startChar": 8,
        "endLine": 5,
        "endChar": 17
      },
      "revId": "0f907492d4f823320adc6b5a3928f56d879dfe6e",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63682710_11b5c079",
        "filename": "benchmark/stat_test.go",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2021-01-25T16:23:21Z",
      "side": 1,
      "message": "this isn\u0027t necessary, right?",
      "range": {
        "startLine": 28,
        "startChar": 2,
        "endLine": 28,
        "endChar": 18
      },
      "revId": "0f907492d4f823320adc6b5a3928f56d879dfe6e",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c94605a7_0ef6f04b",
        "filename": "benchmark/stat_test.go",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1018834
      },
      "writtenOn": "2021-01-26T08:13:25Z",
      "side": 1,
      "message": "Correct, it was just to make it easy play with the read benchmark. I can drop it.",
      "parentUuid": "63682710_11b5c079",
      "range": {
        "startLine": 28,
        "startChar": 2,
        "endLine": 28,
        "endChar": 18
      },
      "revId": "0f907492d4f823320adc6b5a3928f56d879dfe6e",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e90c0cb_15ca3018",
        "filename": "fuse/api.go",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2021-01-25T16:23:21Z",
      "side": 1,
      "message": "// increases throughput",
      "revId": "0f907492d4f823320adc6b5a3928f56d879dfe6e",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b03f25d9_bad24347",
        "filename": "fuse/api.go",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 1018834
      },
      "writtenOn": "2021-01-26T08:13:25Z",
      "side": 1,
      "message": "Will improve the comment.",
      "parentUuid": "3e90c0cb_15ca3018",
      "revId": "0f907492d4f823320adc6b5a3928f56d879dfe6e",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c1a34d5_2b25e60f",
        "filename": "fuse/server.go",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2021-01-25T16:23:21Z",
      "side": 1,
      "message": "have you looked at how expensive the clone operation is? Is it worth it to automatically do this, eg. as part of increasing the number of readers (see line 324).\n\nI suspect it might be a bit slow, but if it is not, it might be better to have the number of fds scale automatically with the load that the file system receives.\n\nCan you add benchmark results to the commit message? how does it scale beyond 2 connections?",
      "range": {
        "startLine": 209,
        "startChar": 3,
        "endLine": 209,
        "endChar": 38
      },
      "revId": "0f907492d4f823320adc6b5a3928f56d879dfe6e",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2004883b_4d301c5d",
        "filename": "fuse/server.go",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1018834
      },
      "writtenOn": "2021-01-26T08:13:25Z",
      "side": 1,
      "message": "From an unscientific test, a single call to cloneFuseConnection takes around 10Âµs on my i7-8550U.\n\nAgree it would be nicer to scale automatically. I could experiment with opening file descriptors on demand.\n\nWill update the commit message with some benchmark results.",
      "parentUuid": "6c1a34d5_2b25e60f",
      "range": {
        "startLine": 209,
        "startChar": 3,
        "endLine": 209,
        "endChar": 38
      },
      "revId": "0f907492d4f823320adc6b5a3928f56d879dfe6e",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce9ce12f_57344443",
        "filename": "fuse/server.go",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1018834
      },
      "writtenOn": "2021-01-26T14:50:12Z",
      "side": 1,
      "message": "Pushed changes based on the review comments but still looking into scaling number of connections automatically. Just naively cloning a new connection before dispatching a new loop gives worse performance. Limiting how often we add new connections could be a viable strategy though. For example if add a new connection at most once every 10 ms my read benchmark hits 21 GB/s (see my latest commit message for results when hard-coding the number of connections). The question is just how to tune this interval and the maximum number of connections/readers. Will experiment a bit more...",
      "parentUuid": "2004883b_4d301c5d",
      "range": {
        "startLine": 209,
        "startChar": 3,
        "endLine": 209,
        "endChar": 38
      },
      "revId": "0f907492d4f823320adc6b5a3928f56d879dfe6e",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e6e5638_275724ec",
        "filename": "fuse/server.go",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1018834
      },
      "writtenOn": "2021-01-26T16:18:41Z",
      "side": 1,
      "message": "Actually the performance improvement on my laptop seem to come solely from effectively increasing _MAX_READERS. Need to test more on my other machines...",
      "parentUuid": "ce9ce12f_57344443",
      "range": {
        "startLine": 209,
        "startChar": 3,
        "endLine": 209,
        "endChar": 38
      },
      "revId": "0f907492d4f823320adc6b5a3928f56d879dfe6e",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adfba88f_c82324de",
        "filename": "fuse/server.go",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2021-01-26T18:39:06Z",
      "side": 1,
      "message": "Ah! Yes, this also why I wanted to know why cloning fds would make it go faster. AFAIK, I don\u0027t know that there is a special structure backing the fd where parallelism helps things go faster.\n\nit would be interesting to make MAX_READERS tunable, or even better, make it auto-tunable.\n\nCan you test with a FS that does some amount of work? If you have a nop filesystem, you\u0027re basically testing how fast the FUSE framework itself goes, which is basically how fast it can allocate request buffers and parse out headers. Maybe some flavor of an in-memory filesystem where you read/write data.",
      "parentUuid": "0e6e5638_275724ec",
      "range": {
        "startLine": 209,
        "startChar": 3,
        "endLine": 209,
        "endChar": 38
      },
      "revId": "0f907492d4f823320adc6b5a3928f56d879dfe6e",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2f9ad6b_7dbb3045",
        "filename": "fuse/server.go",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1018834
      },
      "writtenOn": "2021-01-27T10:24:04Z",
      "side": 1,
      "message": "\u003e Ah! Yes, this also why I wanted to know why cloning fds would make it go faster. AFAIK, I don\u0027t know that there is a special structure backing the fd where parallelism helps things go faster.\n\nIndeed, on my 96 core system the improvements are all thanks to effectively higher MAX_READERS. I will close the github issue (and \"abandon\" this change I suppose).\n\n\u003e it would be interesting to make MAX_READERS tunable, or even better, make it auto-tunable.\n\nIn my experiments, something like maxReaders :\u003d max(16, numCores) seems to work well. I don\u0027t see any improvements with MAX_READERS \u003e 16 on the 96 core system even when I turn up the jobs variable. I will submit a new issue later at some point.\n\n\u003e Can you test with a FS that does some amount of work? If you have a nop filesystem, you\u0027re basically testing how fast the FUSE framework itself goes, which is basically how fast it can allocate request buffers and parse out headers. Maybe some flavor of an in-memory filesystem where you read/write data.\n\nYeah, the purpose of the nop filesytem was just to get an idea of what the ceiling is for the real filesystem implementation.\n\nI haven\u0027t retested with my real filesystem implementation but with the PoC commit I referred to in the github issue I saw improvements with 20-30%. Not as dramatic as for the nop filesystem but still worth to tweak the MAX_READERS logic I think.",
      "parentUuid": "adfba88f_c82324de",
      "range": {
        "startLine": 209,
        "startChar": 3,
        "endLine": 209,
        "endChar": 38
      },
      "revId": "0f907492d4f823320adc6b5a3928f56d879dfe6e",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}