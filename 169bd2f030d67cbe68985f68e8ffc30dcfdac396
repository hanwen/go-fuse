{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ee303258_f29eacc0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2025-01-14T17:20:00Z",
      "side": 1,
      "message": "when I print out uid/gid for the requests, they are all uint32(-1). Is this also a way to signal that the uid/gid should be disregarded?",
      "range": {
        "startLine": 13,
        "startChar": 58,
        "endLine": 16,
        "endChar": 21
      },
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ea10d51_1c495377",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1038576
      },
      "writtenOn": "2025-01-14T22:26:26Z",
      "side": 1,
      "message": "The implementation in the kernel says the following wrt uid/gid in the header.\nhttps://elixir.bootlin.com/linux/v6.12.6/source/fs/fuse/dev.c#L155\n\u003e For those FUSE servers who support idmapped mounts,\n\u003e we send UID/GID only along with \"inode creation\"\n\u003e fuse requests, otherwise idmap \u003d\u003d \u0026invalid_mnt_idmap and\n\u003e req-\u003ein.h.{u,g}id will be equal to FUSE_INVALID_UIDGID (-1).\n\nLooking into the actual fuse operations, here are a few places where uid/gid will contain valid values:\n* automic_open\n* mknod, mkdir, symlink, link\n* renam",
      "parentUuid": "ee303258_f29eacc0",
      "range": {
        "startLine": 13,
        "startChar": 58,
        "endLine": 16,
        "endChar": 21
      },
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6c9bc79_d05e9f0a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2025-01-15T18:16:08Z",
      "side": 1,
      "message": "that sounds useful to document as well with the option. Maybe \"If set, valid UID/GIDs are only sent for requests that create new inodes\"",
      "parentUuid": "7ea10d51_1c495377",
      "range": {
        "startLine": 13,
        "startChar": 58,
        "endLine": 16,
        "endChar": 21
      },
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19329ace_5f41b412",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1038576
      },
      "writtenOn": "2025-01-15T21:13:30Z",
      "side": 1,
      "message": "ack. updated.",
      "parentUuid": "b6c9bc79_d05e9f0a",
      "range": {
        "startLine": 13,
        "startChar": 58,
        "endLine": 16,
        "endChar": 21
      },
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0c342c9_455c67f4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2025-01-16T06:55:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "19329ace_5f41b412",
      "range": {
        "startLine": 13,
        "startChar": 58,
        "endLine": 16,
        "endChar": 21
      },
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be1fb2b5_d0c67de1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1038576
      },
      "writtenOn": "2025-01-09T03:37:15Z",
      "side": 1,
      "message": "Hi @hanwen, the ID-mapped mount support in FUSE was added in the 6.12 kernel. I think it would be a useful feature to support in go-fuse. Could you please take a look at this patch when you get a chance? I\u0027m happy to iterate on this further to address any feedback or changes needed. Thanks!",
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c4350c6_6d1c399a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2025-01-10T13:12:39Z",
      "side": 1,
      "message": "the extensive test is nice, but seems excessive given that there aren\u0027t really any new code paths that this change adds. Also, why the option? Could we just enable the CAP_ALLOW_IDMAP unconditionally?",
      "parentUuid": "be1fb2b5_d0c67de1",
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05ef9de6_c311eb13",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2025-01-10T13:12:39Z",
      "side": 1,
      "message": "thanks for the change! \n\nWhen",
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d63ea41_06371431",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2025-01-10T13:19:09Z",
      "side": 1,
      "message": "also, the lwn article talks about FUSE_OWNER_UID_GID_EXT. Do we not also have to support this feature (which seems more involved)?",
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb8d4d46_e999897f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1038576
      },
      "writtenOn": "2025-01-10T20:10:25Z",
      "side": 1,
      "message": "I wrote the test case to simplify the feature validation, because currently there isn\u0027t an existing tool to perform an id-mapped mount. The only one that I can find is this source code https://raw.githubusercontent.com/brauner/mount-idmapped/master/mount-idmapped.c (referenced by the lwn article) which requires compilation. Therefore I thought a test case could make the testing easier. But I am happy to remove the test if it\u0027s excessive. Please let me know.\n\nMy original implementation simply enabled CAP_ALLOW_IDMAP unconditionally without requiring a flag. But I realized it would break the regular use cases. The current implementation in the kernel requires the server to opt in this feature by passing in this flag AND specifying the \"default_permissions\" mount option. Passing the flag without the mount option will result in init failure. So I had to introduce the flag to turn on this feature as needed.",
      "parentUuid": "1c4350c6_6d1c399a",
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c2a07e9a_1c6ea6d4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1038576
      },
      "writtenOn": "2025-01-10T20:10:25Z",
      "side": 1,
      "message": "It seems like the FUSE_OWNER_UID_GID_EXT didn\u0027t eventually make into the kernel. The discussion can be found in this thread https://lore.kernel.org/all/CAJfpegsVY97_5mHSc06mSw79FehFWtoXT\u003dhhTUK_E-Yhr7OAuQ@mail.gmail.com/. So the final patch only had the FUSE_ALLOW_IDMAP and requires \"default_permissions\".",
      "parentUuid": "7d63ea41_06371431",
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76a83192_e5c1d859",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2025-01-14T17:20:00Z",
      "side": 1,
      "message": "it is probably better to have the test, but it took me a while to grok it.",
      "parentUuid": "fb8d4d46_e999897f",
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c903707c_f1e95e20",
        "filename": "fs/idmapped_mount_test.go",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2025-01-10T13:12:39Z",
      "side": 1,
      "message": "huh, where does EBADF come from?",
      "range": {
        "startLine": 66,
        "startChar": 28,
        "endLine": 66,
        "endChar": 44
      },
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "915ef918_b728a273",
        "filename": "fs/idmapped_mount_test.go",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1038576
      },
      "writtenOn": "2025-01-10T20:10:25Z",
      "side": 1,
      "message": "In fact this parameter could be any value since the \"source\" parameter contains an absolute path. Per open_tree manpage (https://github.com/brauner/man-pages-md/blob/main/open_tree.md), the dirfd parameter will be ignored if the 2nd parameter is an absolute path. Instead of passing a random value, I think EBADF makes this clearer. The reference implementation in https://raw.githubusercontent.com/brauner/mount-idmapped/master/mount-idmapped.c also used EBADF for this syscall.",
      "parentUuid": "c903707c_f1e95e20",
      "range": {
        "startLine": 66,
        "startChar": 28,
        "endLine": 66,
        "endChar": 44
      },
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7c63dae_fdbdb6ba",
        "filename": "fs/idmapped_mount_test.go",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2025-01-14T17:20:00Z",
      "side": 1,
      "message": "it triggers my internal typechecker. How about\n\n```\nignored :\u003d 0 \nunix.OpenTree(ignored, .. )\n```",
      "parentUuid": "915ef918_b728a273",
      "range": {
        "startLine": 66,
        "startChar": 28,
        "endLine": 66,
        "endChar": 44
      },
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "baadfd9d_e1fb49ee",
        "filename": "fs/idmapped_mount_test.go",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1038576
      },
      "writtenOn": "2025-01-14T22:26:26Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "d7c63dae_fdbdb6ba",
      "range": {
        "startLine": 66,
        "startChar": 28,
        "endLine": 66,
        "endChar": 44
      },
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ed74a52_a28e6828",
        "filename": "fuse/api.go",
        "patchSetId": 1
      },
      "lineNbr": 340,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2025-01-14T17:20:00Z",
      "side": 1,
      "message": "```suggestion\n\t// Enabling id-mapped mount will automatically turn on the\n```",
      "range": {
        "startLine": 340,
        "startChar": 4,
        "endLine": 340,
        "endChar": 13
      },
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "87e14704_4b8ae12a",
        "filename": "fuse/api.go",
        "patchSetId": 1
      },
      "lineNbr": 340,
      "author": {
        "id": 1038576
      },
      "writtenOn": "2025-01-14T22:26:26Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "2ed74a52_a28e6828",
      "range": {
        "startLine": 340,
        "startChar": 4,
        "endLine": 340,
        "endChar": 13
      },
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "378d1831_94eff982",
        "filename": "fuse/api.go",
        "patchSetId": 1
      },
      "lineNbr": 341,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2025-01-14T17:20:00Z",
      "side": 1,
      "message": "I feel that this should include a 1-2 sentence summary of what ID-maps do.",
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eea5e494_ad1d1ae7",
        "filename": "fuse/api.go",
        "patchSetId": 1
      },
      "lineNbr": 341,
      "author": {
        "id": 1038576
      },
      "writtenOn": "2025-01-14T22:26:26Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "378d1831_94eff982",
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5983544_42286a3a",
        "filename": "fuse/opcode.go",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2025-01-14T17:20:00Z",
      "side": 1,
      "message": "there is a options.Logger to do this more cleanly, but what is the value of the message? If itś not support the ID map will fail later on?",
      "range": {
        "startLine": 124,
        "startChar": 6,
        "endLine": 124,
        "endChar": 7
      },
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41506b1c_15968b47",
        "filename": "fuse/opcode.go",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1038576
      },
      "writtenOn": "2025-01-14T22:26:26Z",
      "side": 1,
      "message": "If the kernel does not support id-mapped mount, the fuse will still mount successfully. But the subsequent mount_setattr and move_mount syscalls will fail. I think this flag will be helpful to troubleshoot failures in those subsequent operations.\n\nIn the new revision, I updated the code to use options.Logger. But I\u0027m fine with removing this log if it deems unnecessary.",
      "parentUuid": "d5983544_42286a3a",
      "range": {
        "startLine": 124,
        "startChar": 6,
        "endLine": 124,
        "endChar": 7
      },
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9243b15c_73af4091",
        "filename": "fuse/opcode.go",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2025-01-15T18:16:08Z",
      "side": 1,
      "message": "let\u0027s remove it.",
      "parentUuid": "41506b1c_15968b47",
      "range": {
        "startLine": 124,
        "startChar": 6,
        "endLine": 124,
        "endChar": 7
      },
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7000b4f_b6cca841",
        "filename": "fuse/opcode.go",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1038576
      },
      "writtenOn": "2025-01-15T21:13:30Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "9243b15c_73af4091",
      "range": {
        "startLine": 124,
        "startChar": 6,
        "endLine": 124,
        "endChar": 7
      },
      "revId": "169bd2f030d67cbe68985f68e8ffc30dcfdac396",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}