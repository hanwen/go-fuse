{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d4c822ff_a629bf8a",
        "filename": "fs/loopback_linux_test.go",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2022-01-05T17:32:48Z",
      "side": 1,
      "message": "your bugfix itself looks good, but here you are looking into the implementation of the file system. The test should only look at the externally visible effects, ie. by issuing syscalls to files inside the mountpoint.",
      "range": {
        "startLine": 79,
        "startChar": 1,
        "endLine": 81,
        "endChar": 1
      },
      "revId": "4f79703d08087e3666730ef6a331453197dac530",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae9b9cd2_df76ca7e",
        "filename": "fs/loopback_linux_test.go",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 1019773
      },
      "writtenOn": "2022-01-06T16:34:43Z",
      "side": 1,
      "message": "However, loopback filesystem call syscalls \u0027lstat\u0027 directly to lookup, so this bugfix cannot recurrent in loopback filesystem. In mine filesystem which is a network filesystem, the Lookup API need some immutable metadata from Inode(implementation of the file system). Lookup API get Inode from Inode.children firstly, then issue request to server. If Lookup API can\u0027t find children Inode from Inode.children, it will issue request to server to get metadata. Therefore, the unittest use implementation to prove this bug. If I use syscalls, I should implement a file system by rewriting lookup or readdir.",
      "parentUuid": "d4c822ff_a629bf8a",
      "range": {
        "startLine": 79,
        "startChar": 1,
        "endLine": 81,
        "endChar": 1
      },
      "revId": "4f79703d08087e3666730ef6a331453197dac530",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f1ebf38_1dbae075",
        "filename": "fs/loopback_linux_test.go",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 1007980
      },
      "writtenOn": "2022-01-07T10:42:31Z",
      "side": 1,
      "message": "good point. However, there is still no need to delve into the implementation of rawBridge.\n\nYou could do\n\n```\nroot :\u003d tc.loopback.EmbeddedInode()\nch1 :\u003d root.GetChild(\"file\") \nch2 :\u003d root.GetChild(\"dir\").GetChild(\"file\")\n```\n\nto get at the inodes directly.",
      "parentUuid": "ae9b9cd2_df76ca7e",
      "range": {
        "startLine": 79,
        "startChar": 1,
        "endLine": 81,
        "endChar": 1
      },
      "revId": "4f79703d08087e3666730ef6a331453197dac530",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}